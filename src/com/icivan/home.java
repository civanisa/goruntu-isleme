/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.icivan;

import java.awt.Color;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author ISA
 */
public class home extends javax.swing.JFrame {
          
    /**
     * Creates new form home
     */
    public home() {
        initComponents();
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("ppng.png")));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGrupEg = new javax.swing.ButtonGroup();
        buttonGrupFiltre = new javax.swing.ButtonGroup();
        orjinal = new javax.swing.JLabel();
        orjinal2 = new javax.swing.JLabel();
        edit = new javax.swing.JLabel();
        tabmenu = new javax.swing.JTabbedPane();
        uzamsal = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        dondurme = new javax.swing.JButton();
        otele = new javax.swing.JButton();
        textDondur = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tx = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ty = new javax.swing.JTextField();
        eg = new javax.swing.JButton();
        pX = new javax.swing.JRadioButton();
        nX = new javax.swing.JRadioButton();
        pY = new javax.swing.JRadioButton();
        nY = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        textEg = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        meanFiltre = new javax.swing.JButton();
        x3 = new javax.swing.JRadioButton();
        x5 = new javax.swing.JRadioButton();
        x7 = new javax.swing.JRadioButton();
        x11 = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        medianFiltre = new javax.swing.JButton();
        sobelFiltre = new javax.swing.JButton();
        prewittFiltre = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        kontrastGenisletme = new javax.swing.JButton();
        logDonusumu = new javax.swing.JButton();
        gamaDonusum = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        textEsik = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        textC = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        textY = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        histogramHesabi = new javax.swing.JButton();
        showgrafik = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        histogramGerme = new javax.swing.JButton();
        histogramEsitleme = new javax.swing.JButton();
        digerIslemler = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        resimCikar = new javax.swing.JButton();
        islemler = new javax.swing.JPanel();
        griTon = new javax.swing.JButton();
        negatifAl = new javax.swing.JButton();
        siyahBeyaz = new javax.swing.JButton();
        uzaklastirma = new javax.swing.JButton();
        yakinlastirma = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        hX = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        hY = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        he = new javax.swing.JLabel();
        komsu = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        kaydet = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Görüntü İşleme Uygulaması");

        orjinal.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orjinal.setText("Resim Yükle (Dosya / Aç)");
        orjinal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 3));
        orjinal.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        orjinal2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        orjinal2.setText("Resim Yükle (Dosya / Aç)");
        orjinal2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 3));

        edit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        edit.setText("İşlem Uygula");
        edit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204), 3));

        tabmenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabmenuMouseClicked(evt);
            }
        });

        jButton1.setText("Ölçekleme");

        dondurme.setText("Döndür");
        dondurme.setPreferredSize(new java.awt.Dimension(70, 23));
        dondurme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dondurmeActionPerformed(evt);
            }
        });

        otele.setText("Ötele");
        otele.setPreferredSize(new java.awt.Dimension(70, 23));
        otele.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oteleActionPerformed(evt);
            }
        });

        textDondur.setText("0");

        jLabel1.setText("Döndürme Açısını Girin");

        jLabel2.setText("Öteleme Değerlerini Girin");

        tx.setText("0");

        jLabel3.setText("X :");

        jLabel4.setText("Y :");

        ty.setText("0");

        eg.setText("Eğ");
        eg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                egActionPerformed(evt);
            }
        });

        buttonGrupEg.add(pX);
        pX.setSelected(true);
        pX.setText("+X");

        buttonGrupEg.add(nX);
        nX.setText("-X");

        buttonGrupEg.add(pY);
        pY.setText("+Y");

        buttonGrupEg.add(nY);
        nY.setText("-Y");

        jLabel5.setText("Eğme Yapılcak Ekseni Girin");

        jLabel6.setText("Eğme Kaysayısını Girin");

        textEg.setText("0.0");

        javax.swing.GroupLayout uzamsalLayout = new javax.swing.GroupLayout(uzamsal);
        uzamsal.setLayout(uzamsalLayout);
        uzamsalLayout.setHorizontalGroup(
            uzamsalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uzamsalLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(uzamsalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(uzamsalLayout.createSequentialGroup()
                        .addGroup(uzamsalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(uzamsalLayout.createSequentialGroup()
                                .addComponent(pX)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nX)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(pY)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(nY))
                            .addComponent(jLabel6))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(uzamsalLayout.createSequentialGroup()
                        .addGroup(uzamsalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(uzamsalLayout.createSequentialGroup()
                                .addComponent(textEg, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(eg, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(uzamsalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jButton1)
                                .addGroup(uzamsalLayout.createSequentialGroup()
                                    .addComponent(textDondur, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(dondurme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel2)
                                .addGroup(uzamsalLayout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(tx, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(ty, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(otele, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addContainerGap(17, Short.MAX_VALUE))))
        );
        uzamsalLayout.setVerticalGroup(
            uzamsalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(uzamsalLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addGap(2, 2, 2)
                .addGroup(uzamsalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textDondur, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dondurme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(8, 8, 8)
                .addGroup(uzamsalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(otele, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(ty, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addGap(14, 14, 14)
                .addGroup(uzamsalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pY)
                    .addComponent(pX)
                    .addComponent(nX)
                    .addComponent(nY))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(uzamsalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(eg)
                    .addComponent(textEg, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(214, Short.MAX_VALUE))
        );

        tabmenu.addTab("Uzamsal işlemler", uzamsal);

        meanFiltre.setLabel("Mean Filtresi");
        meanFiltre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                meanFiltreActionPerformed(evt);
            }
        });

        buttonGrupFiltre.add(x3);
        x3.setSelected(true);
        x3.setText("3x3");

        buttonGrupFiltre.add(x5);
        x5.setText("5x5");

        buttonGrupFiltre.add(x7);
        x7.setText("7x7");

        buttonGrupFiltre.add(x11);
        x11.setText("11x11");
        x11.setToolTipText("");

        jLabel7.setText("Şablon BoyuTunu Seçiniz");

        medianFiltre.setText("Median Filtresi");
        medianFiltre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medianFiltreActionPerformed(evt);
            }
        });

        sobelFiltre.setText("Sobel Filtresi");
        sobelFiltre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sobelFiltreActionPerformed(evt);
            }
        });

        prewittFiltre.setText("Prewitt Filtresi");
        prewittFiltre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prewittFiltreActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(meanFiltre, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(x3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(x5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(x7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(x11))
                    .addComponent(jLabel7)
                    .addComponent(medianFiltre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sobelFiltre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(prewittFiltre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(x3)
                    .addComponent(x5)
                    .addComponent(x7)
                    .addComponent(x11))
                .addGap(18, 18, 18)
                .addComponent(meanFiltre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(medianFiltre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sobelFiltre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(prewittFiltre)
                .addContainerGap(265, Short.MAX_VALUE))
        );

        tabmenu.addTab("Filtreler", jPanel1);

        kontrastGenisletme.setText("Kontrast Genişletme");
        kontrastGenisletme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kontrastGenisletmeActionPerformed(evt);
            }
        });

        logDonusumu.setText("Logaritma Dönüşümü");
        logDonusumu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logDonusumuActionPerformed(evt);
            }
        });

        gamaDonusum.setText("Kuvvet Gama Dönüşümleri");
        gamaDonusum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gamaDonusumActionPerformed(evt);
            }
        });

        jLabel8.setText("Eşik seviyesi Giriniz");

        textEsik.setText("0");

        jLabel9.setText("Sabitleri Giriniz");

        jLabel10.setText("C :");

        textC.setText("0");

        jLabel11.setText("Y :");

        textY.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(kontrastGenisletme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(logDonusumu, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE))
                .addGap(28, 28, 28))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textEsik))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(textC, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(textY))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(gamaDonusum, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(textEsik, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(kontrastGenisletme)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(logDonusumu)
                .addGap(24, 24, 24)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(textC, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(textY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(gamaDonusum)
                .addContainerGap(272, Short.MAX_VALUE))
        );

        tabmenu.addTab("Dönüşümler", jPanel2);

        histogramHesabi.setText("Histogram Hesapla");
        histogramHesabi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histogramHesabiActionPerformed(evt);
            }
        });

        showgrafik.setText("Grafigi Göster");
        showgrafik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showgrafikActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        histogramGerme.setText("Histogram Germe");
        histogramGerme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histogramGermeActionPerformed(evt);
            }
        });

        histogramEsitleme.setText("Histogram Eşitleme");
        histogramEsitleme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                histogramEsitlemeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(histogramHesabi, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                    .addComponent(showgrafik, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(histogramGerme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(histogramEsitleme, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(histogramHesabi)
                .addGap(9, 9, 9)
                .addComponent(showgrafik)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(histogramGerme)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(histogramEsitleme)))
                .addContainerGap(255, Short.MAX_VALUE))
        );

        tabmenu.addTab("Histogram", jPanel3);

        jButton2.setText("İki Resmi Topla");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        resimCikar.setText("İki Resmi Cıkar");
        resimCikar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resimCikarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout digerIslemlerLayout = new javax.swing.GroupLayout(digerIslemler);
        digerIslemler.setLayout(digerIslemlerLayout);
        digerIslemlerLayout.setHorizontalGroup(
            digerIslemlerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, digerIslemlerLayout.createSequentialGroup()
                .addContainerGap(31, Short.MAX_VALUE)
                .addGroup(digerIslemlerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                    .addComponent(resimCikar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(27, 27, 27))
        );
        digerIslemlerLayout.setVerticalGroup(
            digerIslemlerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(digerIslemlerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resimCikar)
                .addContainerGap(405, Short.MAX_VALUE))
        );

        tabmenu.addTab("Diğer İşlemler", digerIslemler);

        islemler.setMaximumSize(new java.awt.Dimension(0, 32767));

        griTon.setText("Resmi Gri Tona Çevir");
        griTon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                griTonActionPerformed(evt);
            }
        });

        negatifAl.setText("Resmin Negatifini Al");
        negatifAl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negatifAlActionPerformed(evt);
            }
        });

        siyahBeyaz.setText("Siyah Beyaz Dönüştürme");
        siyahBeyaz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                siyahBeyazActionPerformed(evt);
            }
        });

        uzaklastirma.setText("Uzaklaştırma");
        uzaklastirma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uzaklastirmaActionPerformed(evt);
            }
        });

        yakinlastirma.setText("Yaklaştırma");
        yakinlastirma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yakinlastirmaActionPerformed(evt);
            }
        });

        jLabel12.setText("X : ");

        jLabel13.setText("Değeri Bulunacak Pixelin Kordinatlar");

        hX.setText("0");

        jLabel14.setText("Y :");

        hY.setText("0");

        jButton3.setText("Hesapla");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout islemlerLayout = new javax.swing.GroupLayout(islemler);
        islemler.setLayout(islemlerLayout);
        islemlerLayout.setHorizontalGroup(
            islemlerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(islemlerLayout.createSequentialGroup()
                .addGroup(islemlerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(islemlerLayout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(islemlerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(komsu, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(islemlerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(islemlerLayout.createSequentialGroup()
                                    .addComponent(jLabel12)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(islemlerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(islemlerLayout.createSequentialGroup()
                                            .addGap(10, 10, 10)
                                            .addComponent(jButton3))
                                        .addGroup(islemlerLayout.createSequentialGroup()
                                            .addComponent(hX, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(jLabel14)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(hY, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addComponent(he, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(islemlerLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(islemlerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(islemlerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(yakinlastirma, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(uzaklastirma, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(griTon, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(negatifAl, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(siyahBeyaz, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel13))))
                .addGap(0, 30, Short.MAX_VALUE))
        );
        islemlerLayout.setVerticalGroup(
            islemlerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(islemlerLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(griTon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(negatifAl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(siyahBeyaz)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(uzaklastirma)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(yakinlastirma)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(islemlerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(hX, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(hY, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(he, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(komsu, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(127, Short.MAX_VALUE))
        );

        tabmenu.addTab("İşlemler", islemler);

        jMenu1.setText("Dosya");

        jMenuItem1.setText("Aç");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        kaydet.setText("Kaydet");
        kaydet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kaydetActionPerformed(evt);
            }
        });
        jMenu1.add(kaydet);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(orjinal, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tabmenu, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(orjinal2, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(tabmenu, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(edit, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(orjinal, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(orjinal2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    BufferedImage image = null;
    BufferedImage image2 = null;
    
    BufferedImage editImage = null;
    
    private boolean kontrolEt(){
        return this.image != null;
    }
    
    private void YuklemeHatasi(){
        JOptionPane.showMessageDialog (null,"İşlenecek Resim Yükleyin (Dosya / Aç)","Yükleme Hatası", JOptionPane.ERROR_MESSAGE);
    }
    
    private void paneleEkle(BufferedImage img){
        
        this.editImage = img;
        
        Image im = img;

        ImageIcon ii = new ImageIcon(im);

        edit.setIcon(ii);
        edit.setText(null);
    }
    
    
    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
       JFileChooser fileChooser = new JFileChooser();
       fileChooser.setFileFilter(new FileNameExtensionFilter("İmage Filter", "jpg"));
       
       fileChooser.showOpenDialog(null);
       File file = fileChooser.getSelectedFile();
        if (file != null) {
            String path = file.getAbsolutePath();
            try {
                this.image = ImageIO.read(file);
            } catch (IOException e) {
                System.out.println(e);
            }

            Image im = Toolkit.getDefaultToolkit().createImage(path);

            ImageIcon ii = new ImageIcon(im);

            orjinal.setIcon(ii);
            orjinal.setText(null);
        }
       
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void tabmenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabmenuMouseClicked
        if (kontrolEt()) {
           Image im = this.image;

           ImageIcon ii = new ImageIcon(im);

           orjinal.setIcon(ii);
           orjinal.setText(null);
        }
    }//GEN-LAST:event_tabmenuMouseClicked
   
    private void dondurmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dondurmeActionPerformed
        if (!kontrolEt()) {
            YuklemeHatasi();
        }else{
            
            int aci = Integer.parseInt(textDondur.getText());
            
            int width = image.getWidth();
            int height = image.getHeight();
            
            BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
                        
            double radyan = aci * 2 * Math.PI / 360;
            
            double x0 = width/2;
            double y0 = height/2;
            
            double x = 0 , y = 0;
            
            for(int i=0; i<height; i++) {
                for(int j=0; j<width; j++) {
                  x = Math.cos(radyan) * (i - x0) - Math.sin(radyan) * (j - y0) + x0;
                  y = Math.sin(radyan) * (i - x0) + Math.cos(radyan) * (j - y0) + y0;
                    if (x>0 && x<width && y>0 && y<height) {
                        img.setRGB((int)x, (int)y, image.getRGB(i, j));
                    }
                }
            }
            
            paneleEkle(img);
            
        }
    }//GEN-LAST:event_dondurmeActionPerformed

    private void oteleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oteleActionPerformed
        if (!kontrolEt()) {
            YuklemeHatasi();
        }else{
            int width = image.getWidth();
            int height = image.getHeight();
            
            BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            
            double x = 0 , y = 0;
            
            int Tx = Integer.parseInt(tx.getText());
            int Ty = Integer.parseInt(ty.getText());
        
            for(int i=0; i<height; i++) {
                for(int j=0; j<width; j++) {
                  x = i + Tx;
                  y = j + Ty;
                  if (x>0 && x<width && y>0 && y<height) {
                    img.setRGB((int)x, (int)y, image.getRGB(i, j));
                  }
                }
            }
            
            paneleEkle(img);
       }
    }//GEN-LAST:event_oteleActionPerformed
    
    private void egActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_egActionPerformed
       if (!kontrolEt()) {
            YuklemeHatasi();
        }else{
            int width = image.getWidth();
            int height = image.getHeight();
            
            BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            
            double x = 0 , y = 0;
            
            //taşıma mesafesi
            double egmeKatsayisi = Double.parseDouble(textEg.getText());
                   
            for(int i=0; i<height; i++) {
                for(int j=0; j<width; j++) {
                    // +X ekseni yönünde
                    if (pX.isSelected()) {
                        x = i + egmeKatsayisi * j;
                        y = j;
                    }
                    // -X ekseni yönünde
                    if (nX.isSelected()) {
                        x = i;
                        y = -egmeKatsayisi * i + j; 
                    }
                    // -Y ekseni yönünde
                    if (nY.isSelected()) {
                        x = i;
                        y = -egmeKatsayisi * i + j; 
                    }
                    // +Y ekseni yönünde
                    if (pY.isSelected()) {
                        x = i;
                        y = egmeKatsayisi * i + j;
                    }
                    if (x>0 && x<width && y>0 && y<height) {
                        img.setRGB((int)x, (int)y, image.getRGB(i, j));
                    }
                }
            }
            
            paneleEkle(img);
       }
    }//GEN-LAST:event_egActionPerformed

    private int seciliBulma(){
        if (x3.isSelected()) {
            return 3;
        }
        else if (x5.isSelected()) {
            return 5;
        }
        else if (x7.isSelected()) {
            return 7;
        }
        else if (x11.isSelected()) {
            return 11;
        }
        else{
            return 0;
        }
    }
    
    private void meanFiltreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_meanFiltreActionPerformed
        if (!kontrolEt()) {
            YuklemeHatasi();
        }else{
            int width = image.getWidth();
            int height = image.getHeight();
            
            Color okunanRenk;
            
            BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            
            
            int SablonBoyutu = seciliBulma(); 
            int x, y, i, j, toplamR, toplamG, toplamB, ortalamaR, ortalamaG, ortalamaB;
            
            for (x = (SablonBoyutu - 1) / 2; x < width - (SablonBoyutu - 1) / 2; x++){
                for (y = (SablonBoyutu - 1) / 2; y < height - (SablonBoyutu - 1) / 2; y++){
                    toplamR = 0; toplamG = 0; toplamB = 0;
                    for (i = -((SablonBoyutu - 1) / 2) ; i <= (SablonBoyutu - 1) / 2 ; i++){
                        for (j = -((SablonBoyutu - 1) / 2); j <= (SablonBoyutu - 1) / 2; j++){
                           okunanRenk = new Color(this.image.getRGB(x + i , y + j));
                           
                           toplamR = toplamR + okunanRenk.getRed();
                           toplamG = toplamG + okunanRenk.getGreen(); 
                           toplamB = toplamB + okunanRenk.getBlue() ;
                        }
                    }
                    
                    ortalamaR = toplamR / (SablonBoyutu * SablonBoyutu); 
                    ortalamaG = toplamG / (SablonBoyutu * SablonBoyutu); 
                    ortalamaB = toplamB / (SablonBoyutu * SablonBoyutu);
                                        
                    img.setRGB(x, y, new Color(ortalamaR,ortalamaG,ortalamaB).getRGB());
                }
            }
            
            paneleEkle(img);
       }
    }//GEN-LAST:event_meanFiltreActionPerformed

    private void medianFiltreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medianFiltreActionPerformed
        if (!kontrolEt()) {
            YuklemeHatasi();
        }else{
            int width = image.getWidth();
            int height = image.getHeight();
            
            Color okunanRenk;
            
            BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            
            
            int SablonBoyutu = seciliBulma(); 
            
            int ElemanSayisi = SablonBoyutu * SablonBoyutu;
            
            int[] R = new int[ElemanSayisi]; 
            int[] G = new int[ElemanSayisi]; 
            int[] B = new int[ElemanSayisi];
            int[] Gri = new int[ElemanSayisi];
            
            int x, y, i, j;
            
            for (x = (SablonBoyutu - 1) / 2; x < width - (SablonBoyutu - 1) / 2; x++){
                for (y = (SablonBoyutu - 1) / 2; y < height - (SablonBoyutu - 1) / 2; y++){
                    //Şablon bölgesi (çekirdek matris) içindeki pikselleri tarıyor.
                    int k = 0; 
                    for (i = -((SablonBoyutu - 1) / 2); i <= (SablonBoyutu - 1) / 2; i++){
                        for (j = -((SablonBoyutu - 1) / 2); j <= (SablonBoyutu - 1) / 2; j++){
                            okunanRenk = new Color(this.image.getRGB(x + i , y + j));
                            
                            R[k] = okunanRenk.getRed(); 
                            G[k] = okunanRenk.getGreen(); 
                            B[k] = okunanRenk.getBlue();
                            
                            Gri[k] = (int)(R[k] * 0.299 + G[k] * 0.587 + B[k] * 0.114);
                            k++;
                        }
                    }
                    
                    //Gri tona göre sıralama yapıyor. Aynı anda üç rengide değiştiriyor. 
                    int GeciciSayi = 0;
                    
                    for (i = 0; i < ElemanSayisi; i++){
                        for (j = i + 1; j < ElemanSayisi; j++){
                            if (Gri[j] < Gri[i]){
                                GeciciSayi = Gri[i]; 
                                Gri[i] = Gri[j]; 
                                Gri[j] = GeciciSayi;
                                
                                GeciciSayi = R[i]; 
                                R[i] = R[j]; 
                                R[j] = GeciciSayi;
                                
                                GeciciSayi = G[i]; 
                                G[i] = G[j]; 
                                G[j] = GeciciSayi;
                                
                                GeciciSayi = B[i];
                                B[i] = B[j]; 
                                B[j] = GeciciSayi;
                            }
                        }
                    }
                    
                    //Sıralama sonrası ortadaki değeri çıkış resminin piksel değeri olarak atıyor.
                    img.setRGB(x, y, new Color(R[(ElemanSayisi - 1) / 2], G[(ElemanSayisi - 1) / 2], B[(ElemanSayisi - 1) / 2]).getRGB());
                }
            }
            
            paneleEkle(img);
       }
    }//GEN-LAST:event_medianFiltreActionPerformed

    private void sobelFiltreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sobelFiltreActionPerformed
       if (!kontrolEt()) {
            YuklemeHatasi();
        }else{
            int width = image.getWidth();
            int height = image.getHeight();
                        
            BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            
            int SablonBoyutu = seciliBulma(); 
            
            int x, y;
            
            Color renk;
            
            for (x = (SablonBoyutu - 1) / 2; x < width - (SablonBoyutu - 1) / 2; x++){
                //Resmi taramaya şablonun yarısı kadar dış kenarlardan içeride başlayacak ve bitirecek.
                for (y = (SablonBoyutu - 1) / 2; y < height - (SablonBoyutu - 1) / 2; y++){ 
                    int P1, P2, P3, P4, P5, P6, P7, P8, P9;
                    
                    renk = new Color(this.image.getRGB(x -1, y -1));
                    P1 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x , y -1));
                    P2 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x + 1 , y -1));
                    P3 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x - 1 , y ));
                    P4 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x , y ));
                    P5 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x + 1 , y));
                    P6 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x - 1 , y + 1));
                    P7 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x , y + 1));
                    P8 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x + 1 , y + 1));
                    P9 = renk.getRed();
                    
                    //Hesaplamayı yapan Sobel Temsili matrisi ve formülü.
                    int gx = (P7 + 2 * P8 + P9) - (P1 + 2 * P2 + P3);
                    int gy = (P3 + 2 * P6 + P9) - (P1 + 2 * P4 + P7);
                    int renkDegeri = Math.abs((int)Math.sqrt(Math.pow(gx, 2)+ Math.pow(gy, 2)));
                    
                    //Renkler sınırların dışına çıktıysa, sınır değer alınacak.
                    if (renkDegeri > 255) renkDegeri = 255;
                    
                    img.setRGB(x, y, new Color(renkDegeri, renkDegeri, renkDegeri).getRGB());                   
                }
            }
            
            paneleEkle(img);
       }
    }//GEN-LAST:event_sobelFiltreActionPerformed

    private void prewittFiltreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prewittFiltreActionPerformed
        if (!kontrolEt()) {
            YuklemeHatasi();
        }else{
            int width = image.getWidth();
            int height = image.getHeight();
                        
            BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            
            int SablonBoyutu = seciliBulma(); 
            
            int x, y;
            
            Color renk;
            
            for (x = (SablonBoyutu - 1) / 2; x < width - (SablonBoyutu - 1) / 2; x++){
                //Resmi taramaya şablonun yarısı kadar dış kenarlardan içeride başlayacak ve bitirecek.
                for (y = (SablonBoyutu - 1) / 2; y < height - (SablonBoyutu - 1) / 2; y++){ 
                    int P1, P2, P3, P4, P5, P6, P7, P8, P9;
                    
                    renk = new Color(this.image.getRGB(x -1, y -1));
                    P1 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x , y -1));
                    P2 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x + 1 , y -1));
                    P3 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x - 1 , y ));
                    P4 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x , y ));
                    P5 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x + 1 , y));
                    P6 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x - 1 , y + 1));
                    P7 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x , y + 1));
                    P8 = renk.getRed();
                    
                    renk = new Color(this.image.getRGB(x + 1 , y + 1));
                    P9 = renk.getRed();
                    
                    //Hesaplamayı yapan Sobel Temsili matrisi ve formülü.
                    int gx = (P7 + P8 + P9) - (P1 + P2 + P3);
                    int gy = (P3 + P6 + P9) - (P1 + P4 + P7);
                    int renkDegeri = Math.abs((int)Math.sqrt(Math.pow(gx, 2)+ Math.pow(gy, 2)));    
                    
                    //Renkler sınırların dışına çıktıysa, sınır değer alınacak.
                    if (renkDegeri > 255) renkDegeri = 255;
                    
                    img.setRGB(x, y, new Color(renkDegeri, renkDegeri, renkDegeri).getRGB());                   
                }
            }
            
            paneleEkle(img);
       }
    }//GEN-LAST:event_prewittFiltreActionPerformed

    private void kontrastGenisletmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kontrastGenisletmeActionPerformed
       if (!kontrolEt()) {
             YuklemeHatasi();
        }else{
           int width = this.image.getWidth();
           int height = this.image.getHeight();
           
           int esitDegeri = Integer.parseInt(textEsik.getText());
           
           BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

           for(int i=0; i<height; i++) {
               for(int j=0; j<width; j++) {
                  Color c = new Color(this.image.getRGB(j, i));
                  int red = (c.getRed());
                  int green = (c.getGreen());
                  int blue = (c.getBlue());
                  int pixel = (red+green+blue)/3;
                  if (pixel > esitDegeri) {
                    img.setRGB(j,i,new Color(255,255,255).getRGB());
                  }else{
                    img.setRGB(j,i,new Color(0,0,0).getRGB());
                  }                  
               }
            }
            
            paneleEkle(img);
           
        }
    }//GEN-LAST:event_kontrastGenisletmeActionPerformed

    private void logDonusumuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logDonusumuActionPerformed
        if (!kontrolEt()) {
             YuklemeHatasi();
        }else{
           int width = this.image.getWidth();
           int height = this.image.getHeight();
                     
           BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

           for(int i=0; i<height; i++) {
               for(int j=0; j<width; j++) {
                  Color c = new Color(this.image.getRGB(j, i));
                  int red = (c.getRed());
                  int green = (c.getGreen());
                  int blue = (c.getBlue());
                  int pixel = (red+green+blue)/3;
                  pixel = (int)(Math.log10(1 + pixel) * (255/Math.log10(255+1)));
                  img.setRGB(j,i,new Color(pixel,pixel,pixel).getRGB());                
               }
            }
           
            paneleEkle(img);
        }
    }//GEN-LAST:event_logDonusumuActionPerformed

    private void gamaDonusumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gamaDonusumActionPerformed
        if (!kontrolEt()) {
             YuklemeHatasi();
        }else{
           int width = this.image.getWidth();
           int height = this.image.getHeight();
           
           double c = Double.parseDouble(textC.getText());
           double y = Double.parseDouble(textY.getText());
           
           BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

           for(int i=0; i<height; i++) {
               for(int j=0; j<width; j++) {
                  Color co = new Color(this.image.getRGB(j, i));
                  int red = (co.getRed());
                  int green = (co.getGreen());
                  int blue = (co.getBlue());
                  int pixel = (red+green+blue)/3;
                  pixel = (int)(c * Math.pow(pixel, y));
                  pixel = pixel % 255;
                  img.setRGB(j,i,new Color(pixel,pixel,pixel).getRGB());                
               }
            }
           
            paneleEkle(img);
        }
    }//GEN-LAST:event_gamaDonusumActionPerformed

    int [] histogram = new int[255];
    boolean histogrambool = true;
    
    private void histogramHesabiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histogramHesabiActionPerformed
        if (!kontrolEt()) {
              YuklemeHatasi();
         }else{
            int width = image.getWidth();
            int height = image.getHeight();
            
            BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            
            //Diziyi Sıfırlama
            for (int i = 0; i < histogram.length; i++) {
                histogram[i]=0;
            }

            for (int i = 0; i < height; i++) {
               for (int j = 0; j < width; j++) {
                    Color c = new Color(this.image.getRGB(j, i));
                    int red = (c.getRed());
                    int green = (c.getGreen());
                    int blue = (c.getBlue());
                    int pixel = (red+green+blue)/3;
                    pixel = pixel % 255;
                    Color newColor = new Color(pixel,pixel,pixel);
                    img.setRGB(j,i,newColor.getRGB());
                    histogram[pixel] +=1; 
               }
            }
            
            histogrambool = false;

            paneleEkle(img);
         }
    }//GEN-LAST:event_histogramHesabiActionPerformed
       
    private void chartFrameOlustur(){
        DefaultCategoryDataset barChartData = new DefaultCategoryDataset();

        for (Integer i = 0; i < 255; i++) {
            barChartData.setValue(histogram[i], "", i.toString());
        }

        JFreeChart barChart = ChartFactory.createBarChart("Histogram Grafiği", "Pixel", "Adet", barChartData, PlotOrientation.VERTICAL, false, true, false);
        CategoryPlot barchrt = barChart.getCategoryPlot();
        barchrt.setRangeGridlinePaint(Color.black);

        ChartFrame frame = new ChartFrame("Histogram Grafiği Formu",barChart);

        frame.setVisible(true);
        frame.setSize(1500,750);
    }
    
    private void showgrafikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showgrafikActionPerformed
        if (!histogrambool) {
            chartFrameOlustur();
        }else{
            JOptionPane.showMessageDialog (null,"Resimin Histogramını Hesaplayın","Histogram Hatası", JOptionPane.ERROR_MESSAGE);
        }        
    }//GEN-LAST:event_showgrafikActionPerformed

    private void histogramGermeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histogramGermeActionPerformed
        if (!histogrambool) {
            int width = image.getWidth();
            int height = image.getHeight();
            
            int gmax = 255;
            int gmin = 0;
            int c = 0, d = 0;
            
            BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            
            //Adeti Sıfırdan Farkılı En Küçük Pixel
            for (int i = 0; i < histogram.length; i++) {
                if (histogram[i] != 0) {
                    c = i;
                    break;
                }
            }
            
            //Adeti Sıfırdan Farklı En büyük Pixel
            for (int i = histogram.length; i <=0 ; i--) {
                if (histogram[i] != 0) {
                    d = i;
                    break;
                }
            }
            
            //Diziyi Sıfırlama
            for (int i = 0; i < histogram.length; i++) {
                histogram[i]=0;
            }
            
            //Sıfıra Bolme Hatası Çözümü
            int t;
            if (d-c == 0) {
                t = 1;
            }else{
                t = d-c;
            }
            
            for (int i = 0; i < height; i++) {
               for (int j = 0; j < width; j++) {
                    Color co = new Color(this.image.getRGB(j, i));
                    int red = (co.getRed());
                    int green = (co.getGreen());
                    int blue = (co.getBlue());
                    int pixel = (red+green+blue)/3;
                    pixel = pixel % 255;
                    //Histogram Germe Formülü
                    int ciktiPixel =Math.abs(((pixel-c) * ((gmax-gmin)/(t)) + gmin));
                    ciktiPixel = ciktiPixel % 255;
                    Color newColor = new Color(ciktiPixel,ciktiPixel,ciktiPixel);
                    img.setRGB(j,i,newColor.getRGB());
                    histogram[ciktiPixel] +=1;
               }
            }
            
            DefaultCategoryDataset barChartData = new DefaultCategoryDataset();

            for (Integer i = 0; i < 255; i++) {
                barChartData.setValue(histogram[i], "", i.toString());
            }

            JFreeChart barChart = ChartFactory.createBarChart("Histogram Grafiği", "Pixel", "Adet", barChartData, PlotOrientation.VERTICAL, false, true, false);
            CategoryPlot barchrt = barChart.getCategoryPlot();
            barchrt.setRangeGridlinePaint(Color.black);

            ChartFrame frame = new ChartFrame("Histogram Grafiği Formu",barChart);

            frame.setVisible(true);
            frame.setSize(1500,750);
            
            
            paneleEkle(img);
        }else{
            JOptionPane.showMessageDialog (null,"Resimin Histogramını Hesaplayın","Histogram Hatası", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_histogramGermeActionPerformed

    private void histogramEsitlemeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_histogramEsitlemeActionPerformed
        if (!histogrambool) {
            int width = image.getWidth();
            int height = image.getHeight();
            
            double pixelSayisi = width * height;
            double c [] = new double[255];
            
            BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            
            for (int i = 0; i < 255; i++) {
                c[i]=0;
            }
            
            for (int i = 0; i < histogram.length; i++) {
                c[i] = (histogram[i] / pixelSayisi);
            }
            
            for (int i = 0; i < histogram.length; i++) {
                if (i == 0) {
                    c[i] = (histogram[i]*255);
                }else{
                    c[i] = (histogram[i]*255 + histogram[i-1]);
                }
            }
            
            for (int i = 0; i < height; i++) {
               for (int j = 0; j < width; j++) {
                    Color co = new Color(this.image.getRGB(j, i));
                    int red = (co.getRed())%255;
                    int green = (co.getGreen());
                    int blue = (co.getBlue());
                    int r =(int)(c[red]*255/256);
                    r = r % 255;
                    int g = (int)(c[green]*255/256);
                    g = g % 255;
                    int b = (int)(c[blue]*255/256);
                    b = b % 255;
                    img.setRGB(j,i,new Color(r,g,b).getRGB());
               }
            }
            
            
            DefaultCategoryDataset barChartData = new DefaultCategoryDataset();

            for (Integer i = 0; i < 255; i++) {
                barChartData.setValue(c[i], "", i.toString());
            }

            JFreeChart barChart = ChartFactory.createBarChart("Histogram Grafiği", "Pixel", "Adet", barChartData, PlotOrientation.VERTICAL, false, true, false);
            CategoryPlot barchrt = barChart.getCategoryPlot();
            barchrt.setRangeGridlinePaint(Color.black);

            ChartFrame frame = new ChartFrame("Histogram Grafiği Formu",barChart);

            frame.setVisible(true);
            frame.setSize(1500,750);
            
            paneleEkle(img);
        }else{
            JOptionPane.showMessageDialog (null,"Resimin Histogramını Hesaplayın","Histogram Hatası", JOptionPane.ERROR_MESSAGE);
        } 
    }//GEN-LAST:event_histogramEsitlemeActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        if (!kontrolEt()) {
              YuklemeHatasi();
         }else{            
            orjinal.setBounds(0, 0, 512, 256);
            orjinal2.setVisible(true);
            orjinal2.setBounds(0, 256, 512, 256);
            
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.showOpenDialog(null);

            File file = fileChooser.getSelectedFile();
            if (file != null) {
                String path = file.getAbsolutePath();

                try {
                    this.image2 = ImageIO.read(file);
                } catch (IOException e) {
                    System.out.println(e);
                }

                Image im = Toolkit.getDefaultToolkit().createImage(path);

                ImageIcon ii = new ImageIcon(im);

                orjinal2.setIcon(ii);
                orjinal2.setText(null);


                int width = this.image.getWidth();
                int height = this.image.getHeight();

                BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

                for(int i=0; i<height; i++) {
                    for(int j=0; j<width; j++) {
                       Color c = new Color(this.image.getRGB(j, i));
                       int red = (c.getRed());
                       int green = (c.getGreen());
                       int blue = (c.getBlue());
                       Color c1 = new Color(this.image2.getRGB(j, i));
                       red += (c1.getRed());
                       green += (c1.getGreen());
                       blue += (c1.getBlue());
                       red = red / 2;
                       green = green / 2;
                       blue = blue / 2;
                       img.setRGB(j,i,new Color(red,green,blue).getRGB());
                    }
                 }

                paneleEkle(img);
            }
            
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void resimCikarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resimCikarActionPerformed
        if (!kontrolEt()) {
              YuklemeHatasi();
         }else{            
            orjinal.setBounds(0, 0, 512, 256);
            orjinal2.setVisible(true);
            orjinal2.setBounds(0, 256, 512, 256);
            
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.showOpenDialog(null);

            File file = fileChooser.getSelectedFile();
            if (file != null) {
                String path = file.getAbsolutePath();
                System.err.println(path);
                try {
                    this.image2 = ImageIO.read(file);
                } catch (IOException e) {
                    System.out.println(e);
                }

                Image im = Toolkit.getDefaultToolkit().createImage(path);

                ImageIcon ii = new ImageIcon(im);

                orjinal2.setIcon(ii);
                orjinal2.setText(null);


                int width = this.image.getWidth();
                int height = this.image.getHeight();

                BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

                for(int i=0; i<height; i++) {
                    for(int j=0; j<width; j++) {
                       Color c = new Color(this.image.getRGB(j, i));
                       int red = (c.getRed());
                       int green = (c.getGreen());
                       int blue = (c.getBlue());
                       Color c1 = new Color(this.image2.getRGB(j, i));
                       red -= (c1.getRed());
                       green -= (c1.getGreen());
                       blue -= (c1.getBlue());
                       red = Math.abs(red);
                       green = Math.abs(green);
                       blue = Math.abs(blue);
                       img.setRGB(j,i,new Color(red,green,blue).getRGB());
                    }
                 }

                paneleEkle(img);
            }
            
        }
    }//GEN-LAST:event_resimCikarActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (!kontrolEt()) {
            YuklemeHatasi();
        }else{
            int width = this.image.getWidth();
            int height = this.image.getHeight();

            BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

            int hx = Integer.parseInt(hX.getText());
            int hy = Integer.parseInt(hY.getText());

            int pixel [] = new int[9];

            for(int i=0; i<height; i++) {
                for(int j=0; j<width; j++) {
                    Color c = new Color(this.image.getRGB(j, i));
                    int red = (c.getRed());
                    int green = (c.getGreen());
                    int blue = (c.getBlue());
                    if (j == hy && i == hx) {
                        pixel[4] = (red+green+blue)/3;
                        img.setRGB(j,i,new Color(0,0,0).getRGB());
                        he.setText( "R : " + red + " G : " + green + " B : " + blue );
                    }
                    //Pixelin Komsuları
                    else if (j-1 == hy && i-1==hx) {
                        pixel[0] = (red+green+blue)/3;
                        img.setRGB(j,i,new Color(0,0,0).getRGB());
                    }
                    else if (j-1 == hy && i==hx) {
                        pixel[1] = (red+green+blue)/3;
                        img.setRGB(j,i,new Color(0,0,0).getRGB());
                    }
                    else if (j-1 == hy && i+1==hx) {
                        pixel[2] = (red+green+blue)/3;
                        img.setRGB(j,i,new Color(0,0,0).getRGB());
                    }else if (j == hy && i-1==hx) {
                        pixel[3] = (red+green+blue)/3;
                        img.setRGB(j,i,new Color(0,0,0).getRGB());
                    }
                    else if (j == hy && i+1==hx) {
                        pixel[5] = (red+green+blue)/3;
                        img.setRGB(j,i,new Color(0,0,0).getRGB());
                    }
                    else if (j+1 == hy && i-1==hx) {
                        pixel[6] = (red+green+blue)/3;
                        img.setRGB(j,i,new Color(0,0,0).getRGB());

                    }
                    else if (j+1 == hy && i==hx) {
                        pixel[7] = (red+green+blue)/3;
                        img.setRGB(j,i,new Color(0,0,0).getRGB());
                    }
                    else if (j+1 == hy && i+1==hx) {
                        pixel[8] = (red+green+blue)/3;
                        img.setRGB(j,i,new Color(0,0,0).getRGB());
                    }
                    else{
                        img.setRGB(j,i,new Color(red,green,blue).getRGB());
                    }
                }
            }
            String kom = "<html>";
            for (int i = 0; i < 9; i++) {
                if (i == 0 || i == 3 || i == 6) {
                    kom += "<br>";
                }
                kom += pixel[i] + " ";
            }
            kom +="</html>";
            komsu.setText(kom);

            paneleEkle(img);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void yakinlastirmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_yakinlastirmaActionPerformed
        if (!kontrolEt()) {
            YuklemeHatasi();
        }else{
            int width = image.getWidth();
            int height = image.getHeight();

            int in = 2;

            BufferedImage img = new BufferedImage(width*in, height*in, BufferedImage.TYPE_INT_RGB);

            int x = 0;
            int y = 0;

            for (int i = 0; i < height; i++) {
                for (int j = 0; j < width; j++) {
                    img.setRGB(y,x++ ,image.getRGB(i,j));
                    img.setRGB(y,x++ ,image.getRGB(i,j));
                }
                x=0;
                y+=2;
            }

            paneleEkle(img);
        }
    }//GEN-LAST:event_yakinlastirmaActionPerformed

    private void uzaklastirmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uzaklastirmaActionPerformed
        if (!kontrolEt()) {
            YuklemeHatasi();
        }else{
            int width = image.getWidth();
            int height = image.getWidth();

            int out = 2;

            BufferedImage img = new BufferedImage(width/out, height/out, BufferedImage.TYPE_INT_RGB);

            int x = 0;
            int y = 0;

            for (int i = 0; i < height; i += out) {
                y = 0;
                for (int j = 0; j < width; j += out) {
                    img.setRGB(x, y, image.getRGB(i, j));
                    y++;
                }
                x++;
            }

            paneleEkle(img);
        }
    }//GEN-LAST:event_uzaklastirmaActionPerformed

    private void siyahBeyazActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_siyahBeyazActionPerformed
        if (!kontrolEt()) {
            YuklemeHatasi();
        }else{
            int width = this.image.getWidth();
            int height = this.image.getHeight();

            BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

            for(int i=0; i<height; i++) {
                for(int j=0; j<width; j++) {
                    Color c = new Color(this.image.getRGB(j, i));
                    int red = (int)(c.getRed() * 0.299);
                    int green = (int)(c.getGreen() * 0.587);
                    int blue = (int)(c.getBlue() *0.114);

                    Color newColor;
                    if (red+green+blue/3 > 128 ) {
                        newColor = new Color(255, 255, 255);
                    }else{
                        newColor = new Color(0, 0, 0);
                    }

                    img.setRGB(j,i,newColor.getRGB());
                }
            }

            paneleEkle(img);
        }
    }//GEN-LAST:event_siyahBeyazActionPerformed

    private void negatifAlActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negatifAlActionPerformed
        if (!kontrolEt()) {
            YuklemeHatasi();
        }else{
            int width = this.image.getWidth();
            int height = this.image.getHeight();

            BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

            for(int i=0; i<height; i++) {
                for(int j=0; j<width; j++) {
                    Color c = new Color(this.image.getRGB(j, i));
                    int red = (int)(c.getRed() * 0.299);
                    int green = (int)(c.getGreen() * 0.587);
                    int blue = (int)(c.getBlue() *0.114);
                    red = 255-red;
                    green = 255-green;
                    blue = 255-blue;
                    Color newColor = new Color(red,green,blue);
                    img.setRGB(j,i,newColor.getRGB());
                }
            }

            paneleEkle(img);
        }
    }//GEN-LAST:event_negatifAlActionPerformed

    private void griTonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_griTonActionPerformed
        if (!kontrolEt()) {
            YuklemeHatasi();
        }else{
            int width = this.image.getWidth();
            int height = this.image.getHeight();

            BufferedImage img = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);

            for(int i=0; i<height; i++) {
                for(int j=0; j<width; j++) {
                    Color c = new Color(this.image.getRGB(j, i));
                    int red = (c.getRed());
                    int green = (c.getGreen());
                    int blue = (c.getBlue());
                    Color newColor = new Color((int)(red+green+blue)/3,(int)(red+green+blue)/3,(int)(red+green+blue)/3);
                    img.setRGB(j,i,newColor.getRGB());
                }
            }

            paneleEkle(img);

        }
    }//GEN-LAST:event_griTonActionPerformed

    private void kaydetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kaydetActionPerformed
        
        if (this.image != null) {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(new FileNameExtensionFilter("İmage Filter", "jpg"));
            fileChooser.showOpenDialog(null);
            
            File file = fileChooser.getSelectedFile();
             if (file != null) {
                 String path = file.getAbsolutePath();
                 try {
                     ImageIO.write(this.editImage, "jpeg", file);
                 } catch (IOException e) {
                     System.out.println(e);
                 }
            }
        }else{
            JOptionPane.showMessageDialog (null,"Öncelikle Resim İşleyin","İşleme Hatası", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_kaydetActionPerformed

    private boolean moveControl = false;
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(home.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new home().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGrupEg;
    private javax.swing.ButtonGroup buttonGrupFiltre;
    private javax.swing.JPanel digerIslemler;
    private javax.swing.JButton dondurme;
    private javax.swing.JLabel edit;
    private javax.swing.JButton eg;
    private javax.swing.JButton gamaDonusum;
    private javax.swing.JButton griTon;
    private javax.swing.JTextField hX;
    private javax.swing.JTextField hY;
    private javax.swing.JLabel he;
    private javax.swing.JButton histogramEsitleme;
    private javax.swing.JButton histogramGerme;
    private javax.swing.JButton histogramHesabi;
    private javax.swing.JPanel islemler;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JMenuItem kaydet;
    private javax.swing.JLabel komsu;
    private javax.swing.JButton kontrastGenisletme;
    private javax.swing.JButton logDonusumu;
    private javax.swing.JButton meanFiltre;
    private javax.swing.JButton medianFiltre;
    private javax.swing.JRadioButton nX;
    private javax.swing.JRadioButton nY;
    private javax.swing.JButton negatifAl;
    private javax.swing.JLabel orjinal;
    private javax.swing.JLabel orjinal2;
    private javax.swing.JButton otele;
    private javax.swing.JRadioButton pX;
    private javax.swing.JRadioButton pY;
    private javax.swing.JButton prewittFiltre;
    private javax.swing.JButton resimCikar;
    private javax.swing.JButton showgrafik;
    private javax.swing.JButton siyahBeyaz;
    private javax.swing.JButton sobelFiltre;
    private javax.swing.JTabbedPane tabmenu;
    private javax.swing.JTextField textC;
    private javax.swing.JTextField textDondur;
    private javax.swing.JTextField textEg;
    private javax.swing.JTextField textEsik;
    private javax.swing.JTextField textY;
    private javax.swing.JTextField tx;
    private javax.swing.JTextField ty;
    private javax.swing.JButton uzaklastirma;
    private javax.swing.JPanel uzamsal;
    private javax.swing.JRadioButton x11;
    private javax.swing.JRadioButton x3;
    private javax.swing.JRadioButton x5;
    private javax.swing.JRadioButton x7;
    private javax.swing.JButton yakinlastirma;
    // End of variables declaration//GEN-END:variables
}
